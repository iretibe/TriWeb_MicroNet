// <auto-generated />
using System;
using MicroNet.User.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroNet.User.Infrastructure.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("user")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroNet.User.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.DomainEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAttemptedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Retries")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DomainEventLogs", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.PasswordPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PasswordPolicies", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserGroups", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroupMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserGroupId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId1");

                    b.ToTable("UserGroupMenus", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroupWorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserGroupWorkingDays", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserMenuAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserMenuAccesses", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserPermissions", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserSubGroupMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserGroupId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId1");

                    b.ToTable("UserSubGroupMenus", "user");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.PasswordPolicy", b =>
                {
                    b.OwnsOne("MicroNet.User.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("PasswordPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("PasswordPolicyId");

                            b1.ToTable("PasswordPolicies", "user");

                            b1.WithOwner()
                                .HasForeignKey("PasswordPolicyId");
                        });

                    b.OwnsOne("MicroNet.User.Core.ValueObjects.PasswordRequirements", "Requirements", b1 =>
                        {
                            b1.Property<Guid>("PasswordPolicyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("RequireDigit")
                                .HasColumnType("bit");

                            b1.Property<bool>("RequireLowercase")
                                .HasColumnType("bit");

                            b1.Property<bool>("RequireNonAlphanumeric")
                                .HasColumnType("bit");

                            b1.Property<bool>("RequireUniqueChars")
                                .HasColumnType("bit");

                            b1.Property<bool>("RequireUppercase")
                                .HasColumnType("bit");

                            b1.Property<int>("RequiredLength")
                                .HasColumnType("int");

                            b1.HasKey("PasswordPolicyId");

                            b1.ToTable("PasswordPolicies", "user");

                            b1.WithOwner()
                                .HasForeignKey("PasswordPolicyId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Requirements")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroup", b =>
                {
                    b.OwnsOne("MicroNet.User.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("UserGroupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("UserGroupId");

                            b1.ToTable("UserGroups", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserGroupId");
                        });

                    b.OwnsMany("MicroNet.User.Core.ValueObjects.DaySchedule", "WorkingDays", b1 =>
                        {
                            b1.Property<Guid>("UserGroupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.HasKey("UserGroupId", "Id");

                            b1.ToTable("DaySchedule", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserGroupId");
                        });

                    b.OwnsOne("MicroNet.User.Core.ValueObjects.TimeRange", "WorkingHours", b1 =>
                        {
                            b1.Property<Guid>("UserGroupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan>("End")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("Start")
                                .HasColumnType("time");

                            b1.HasKey("UserGroupId");

                            b1.ToTable("UserGroups", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserGroupId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("WorkingDays");

                    b.Navigation("WorkingHours")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroupMenu", b =>
                {
                    b.HasOne("MicroNet.User.Core.Entities.UserGroup", null)
                        .WithMany("Menus")
                        .HasForeignKey("UserGroupId1");

                    b.OwnsOne("MicroNet.User.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("UserGroupMenuId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("UserGroupMenuId");

                            b1.ToTable("UserGroupMenus", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserGroupMenuId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserMenuAccess", b =>
                {
                    b.OwnsOne("MicroNet.User.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("UserMenuAccessId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("UserMenuAccessId");

                            b1.ToTable("UserMenuAccesses", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserMenuAccessId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserPermission", b =>
                {
                    b.OwnsOne("MicroNet.User.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("UserPermissionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("UserPermissionId");

                            b1.ToTable("UserPermissions", "user");

                            b1.WithOwner()
                                .HasForeignKey("UserPermissionId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserSubGroupMenu", b =>
                {
                    b.HasOne("MicroNet.User.Core.Entities.UserGroup", null)
                        .WithMany("SubMenus")
                        .HasForeignKey("UserGroupId1");
                });

            modelBuilder.Entity("MicroNet.User.Core.Entities.UserGroup", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("SubMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
