// <auto-generated />
using System;
using MicroNet.Branch.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroNet.Branch.Api.Migrations
{
    [DbContext(typeof(BranchContext))]
    partial class BranchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("branch")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroNet.Branch.Api.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SetupDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Branches", "branch");
                });

            modelBuilder.Entity("MicroNet.Branch.Api.Entities.BranchTerminationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BranchTerminationRules", "branch");
                });

            modelBuilder.Entity("MicroNet.Branch.Api.Entities.Branch", b =>
                {
                    b.OwnsOne("MicroNet.Branch.Api.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches", "branch");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.OwnsOne("MicroNet.Branch.Api.ValueObjects.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("PostalAddress")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("PostalAddress");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Street");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches", "branch");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.OwnsMany("MicroNet.Branch.Api.ValueObjects.ProductSummary", "ProductSummaries", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Balance")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Interest")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ManagementFees")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("NumberOfLoans")
                                .HasColumnType("int");

                            b1.Property<decimal>("PenaltyCharges")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ProcessingFees")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("ProductAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalInterest")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalLoanAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalLoanBalance")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("TotalRepayment")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Withdrawal")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("BranchId");

                            b1.ToTable("ProductSummary", "branch");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("PhysicalAddress")
                        .IsRequired();

                    b.Navigation("ProductSummaries");
                });

            modelBuilder.Entity("MicroNet.Branch.Api.Entities.BranchTerminationRule", b =>
                {
                    b.OwnsOne("MicroNet.Branch.Api.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("BranchTerminationRuleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BranchTerminationRuleId");

                            b1.ToTable("BranchTerminationRules", "branch");

                            b1.WithOwner()
                                .HasForeignKey("BranchTerminationRuleId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
