// <auto-generated />
using System;
using MicroNet.System.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroNet.System.Infrastructure.Migrations
{
    [DbContext(typeof(SystemContext))]
    [Migration("20250529201543_SystemMigration")]
    partial class SystemMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("system")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroNet.System.Core.Entities.CompanySetup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OfficialEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfficialPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("YearOfRegistration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CompanySetups", "system");
                });

            modelBuilder.Entity("MicroNet.System.Core.Entities.CompanySetup", b =>
                {
                    b.OwnsOne("MicroNet.System.Core.ValueObjects.CompanyLogo", "Logo", b1 =>
                        {
                            b1.Property<Guid>("CompanySetupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("varbinary(max)")
                                .HasColumnName("LogoContent");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("LogoFileName");

                            b1.HasKey("CompanySetupId");

                            b1.ToTable("CompanySetups", "system");

                            b1.WithOwner()
                                .HasForeignKey("CompanySetupId");
                        });

                    b.OwnsOne("MicroNet.System.Core.ValueObjects.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("CompanySetupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ContactEmail");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ContactFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ContactLastName");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("CompanySetupId");

                            b1.ToTable("CompanySetups", "system");

                            b1.WithOwner()
                                .HasForeignKey("CompanySetupId");
                        });

                    b.OwnsOne("MicroNet.System.Core.ValueObjects.IntegrationSettings", "IntegrationSettings", b1 =>
                        {
                            b1.Property<Guid>("CompanySetupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("BatchTransactionImportEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("BatchImport");

                            b1.Property<bool>("CoreBankingEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("CoreBanking");

                            b1.Property<string>("ExportFolderPath")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("ExportPath");

                            b1.Property<bool>("PaymentGatewayEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("PaymentGateway");

                            b1.Property<string>("SftpPath")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("SftpPath");

                            b1.Property<bool>("TelcoIntegrationEnabled")
                                .HasColumnType("bit")
                                .HasColumnName("TelcoIntegration");

                            b1.HasKey("CompanySetupId");

                            b1.ToTable("CompanySetups", "system");

                            b1.WithOwner()
                                .HasForeignKey("CompanySetupId");
                        });

                    b.OwnsOne("MicroNet.System.Core.ValueObjects.NotificationSettings", "NotificationSettings", b1 =>
                        {
                            b1.Property<Guid>("CompanySetupId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Mode")
                                .HasColumnType("int")
                                .HasColumnName("NotificationMode");

                            b1.Property<string>("Recipients")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("NotificationRecipients");

                            b1.Property<bool>("RequireTransactionLimit")
                                .HasColumnType("bit")
                                .HasColumnName("RequireLimit");

                            b1.Property<bool>("UseMakerChecker")
                                .HasColumnType("bit")
                                .HasColumnName("UseMakerChecker");

                            b1.HasKey("CompanySetupId");

                            b1.ToTable("CompanySetups", "system");

                            b1.WithOwner()
                                .HasForeignKey("CompanySetupId");
                        });

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("IntegrationSettings")
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("NotificationSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
