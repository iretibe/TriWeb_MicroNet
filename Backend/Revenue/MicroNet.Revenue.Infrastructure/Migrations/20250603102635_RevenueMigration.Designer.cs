// <auto-generated />
using System;
using MicroNet.Revenue.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroNet.Revenue.Infrastructure.Migrations
{
    [DbContext(typeof(RevenueContext))]
    [Migration("20250603102635_RevenueMigration")]
    partial class RevenueMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("transaction")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.InterestDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DistributedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalInterest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InterestDistributions", "transaction");
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.ManagementFee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("CalculatedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ChargedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ManagementFees", "transaction");
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.PenaltyCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ChargedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PenaltyCharges", "transaction");
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.RevenueReversal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OriginalTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReversedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReversedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RevenueReversals", "transaction");
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DepositorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DestinationType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transactions", "transaction");
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.InterestDistribution", b =>
                {
                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("InterestDistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("InterestDistributionId");

                            b1.ToTable("InterestDistributions", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("InterestDistributionId");
                        });

                    b.OwnsMany("MicroNet.Revenue.Core.ValueObjects.AccountShare", "DistributedTo", b1 =>
                        {
                            b1.Property<Guid>("InterestDistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AccountNumber")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<decimal>("ShareAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("InterestDistributionId", "Id");

                            b1.ToTable("InterestDistributionAccounts", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("InterestDistributionId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.DistributionPeriod", "Period", b1 =>
                        {
                            b1.Property<Guid>("InterestDistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("InterestDistributionId");

                            b1.ToTable("InterestDistributions", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("InterestDistributionId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("DistributedTo");

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.ManagementFee", b =>
                {
                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("ManagementFeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("ManagementFeeId");

                            b1.ToTable("ManagementFees", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFeeId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.FeeStructure", "Fee", b1 =>
                        {
                            b1.Property<Guid>("ManagementFeeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Frequency")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<decimal>("RateOrAmount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("ManagementFeeId");

                            b1.ToTable("ManagementFees", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("ManagementFeeId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Fee")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.PenaltyCharge", b =>
                {
                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("PenaltyChargeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("PenaltyChargeId");

                            b1.ToTable("PenaltyCharges", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("PenaltyChargeId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.PenaltyReason", "Reason", b1 =>
                        {
                            b1.Property<Guid>("PenaltyChargeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("PenaltyChargeId");

                            b1.ToTable("PenaltyCharges", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("PenaltyChargeId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Reason")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.RevenueReversal", b =>
                {
                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("RevenueReversalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("RevenueReversalId");

                            b1.ToTable("RevenueReversals", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("RevenueReversalId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.ReversalReason", "Reason", b1 =>
                        {
                            b1.Property<Guid>("RevenueReversalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("RevenueReversalId");

                            b1.ToTable("RevenueReversals", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("RevenueReversalId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Reason")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.Transaction", b =>
                {
                    b.HasOne("MicroNet.Revenue.Core.Entities.Transaction", null)
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionId");

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("CreatedAt");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CreatedBy");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("DeletedBy");

                            b1.Property<DateTime?>("UpdatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("UpdatedAt");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UpdatedBy");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.ClientAccount", "Receiver", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AccountName");

                            b1.Property<string>("AccountNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AccountNumber");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("MicroNet.Revenue.Core.ValueObjects.DepositorId", "DepositorId", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("IdNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("IdNumber");

                            b1.Property<string>("IdType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("IdType");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions", "transaction");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("DepositorId")
                        .IsRequired();

                    b.Navigation("Receiver")
                        .IsRequired();
                });

            modelBuilder.Entity("MicroNet.Revenue.Core.Entities.Transaction", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
